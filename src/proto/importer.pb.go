// Edgecore DeviceManager
// Copyright 2020-2021 Edgecore Networks, Inc.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.7.0
// source: importer.proto

package importer

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress      string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	ActUsername    string `protobuf:"bytes,2,opt,name=actUsername,proto3" json:"actUsername,omitempty"`
	ActPassword    string `protobuf:"bytes,3,opt,name=actPassword,proto3" json:"actPassword,omitempty"`
	UserToken      string `protobuf:"bytes,4,opt,name=userToken,proto3" json:"userToken,omitempty"`
	Privilege      string `protobuf:"bytes,5,opt,name=privilege,proto3" json:"privilege,omitempty"`
	SessionEnabled bool   `protobuf:"varint,6,opt,name=sessionEnabled,proto3" json:"sessionEnabled,omitempty"`
	SessionTimeout uint64 `protobuf:"fixed64,7,opt,name=sessionTimeout,proto3" json:"sessionTimeout,omitempty"`
	Httptoken      string `protobuf:"bytes,8,opt,name=httptoken,proto3" json:"httptoken,omitempty"`
}

func (x *DeviceAccount) Reset() {
	*x = DeviceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAccount) ProtoMessage() {}

func (x *DeviceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAccount.ProtoReflect.Descriptor instead.
func (*DeviceAccount) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceAccount) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceAccount) GetActUsername() string {
	if x != nil {
		return x.ActUsername
	}
	return ""
}

func (x *DeviceAccount) GetActPassword() string {
	if x != nil {
		return x.ActPassword
	}
	return ""
}

func (x *DeviceAccount) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *DeviceAccount) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

func (x *DeviceAccount) GetSessionEnabled() bool {
	if x != nil {
		return x.SessionEnabled
	}
	return false
}

func (x *DeviceAccount) GetSessionTimeout() uint64 {
	if x != nil {
		return x.SessionTimeout
	}
	return 0
}

func (x *DeviceAccount) GetHttptoken() string {
	if x != nil {
		return x.Httptoken
	}
	return ""
}

type DeviceAccountList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account map[string]string `protobuf:"bytes,1,rep,name=account,proto3" json:"account,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceAccountList) Reset() {
	*x = DeviceAccountList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAccountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAccountList) ProtoMessage() {}

func (x *DeviceAccountList) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAccountList.ProtoReflect.Descriptor instead.
func (*DeviceAccountList) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceAccountList) GetAccount() map[string]string {
	if x != nil {
		return x.Account
	}
	return nil
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceInfo) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type FreqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserToken string `protobuf:"bytes,2,opt,name=userToken,proto3" json:"userToken,omitempty"`
	Frequency uint32 `protobuf:"varint,3,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
}

func (x *FreqInfo) Reset() {
	*x = FreqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreqInfo) ProtoMessage() {}

func (x *FreqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreqInfo.ProtoReflect.Descriptor instead.
func (*FreqInfo) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{3}
}

func (x *FreqInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *FreqInfo) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *FreqInfo) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type HttpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultData string `protobuf:"bytes,1,opt,name=resultData,proto3" json:"resultData,omitempty"`
}

func (x *HttpData) Reset() {
	*x = HttpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpData) ProtoMessage() {}

func (x *HttpData) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpData.ProtoReflect.Descriptor instead.
func (*HttpData) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{4}
}

func (x *HttpData) GetResultData() string {
	if x != nil {
		return x.ResultData
	}
	return ""
}

type HttpPostData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostData map[string]string `protobuf:"bytes,1,rep,name=postData,proto3" json:"postData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpPostData) Reset() {
	*x = HttpPostData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpPostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpPostData) ProtoMessage() {}

func (x *HttpPostData) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpPostData.ProtoReflect.Descriptor instead.
func (*HttpPostData) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{5}
}

func (x *HttpPostData) GetPostData() map[string]string {
	if x != nil {
		return x.PostData
	}
	return nil
}

type HttpPatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatchData map[string]string `protobuf:"bytes,1,rep,name=patchData,proto3" json:"patchData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpPatchData) Reset() {
	*x = HttpPatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpPatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpPatchData) ProtoMessage() {}

func (x *HttpPatchData) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpPatchData.ProtoReflect.Descriptor instead.
func (*HttpPatchData) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{6}
}

func (x *HttpPatchData) GetPatchData() map[string]string {
	if x != nil {
		return x.PatchData
	}
	return nil
}

type HttpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpMethod     string         `protobuf:"bytes,1,opt,name=httpMethod,proto3" json:"httpMethod,omitempty"`
	HttpPostData   *HttpPostData  `protobuf:"bytes,2,opt,name=httpPostData,proto3" json:"httpPostData,omitempty"`
	HttpDeleteData string         `protobuf:"bytes,3,opt,name=httpDeleteData,proto3" json:"httpDeleteData,omitempty"`
	HttpPatchData  *HttpPatchData `protobuf:"bytes,4,opt,name=httpPatchData,proto3" json:"httpPatchData,omitempty"`
}

func (x *HttpInfo) Reset() {
	*x = HttpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpInfo) ProtoMessage() {}

func (x *HttpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpInfo.ProtoReflect.Descriptor instead.
func (*HttpInfo) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{7}
}

func (x *HttpInfo) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *HttpInfo) GetHttpPostData() *HttpPostData {
	if x != nil {
		return x.HttpPostData
	}
	return nil
}

func (x *HttpInfo) GetHttpDeleteData() string {
	if x != nil {
		return x.HttpDeleteData
	}
	return ""
}

func (x *HttpInfo) GetHttpPatchData() *HttpPatchData {
	if x != nil {
		return x.HttpPatchData
	}
	return nil
}

type LogService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress         string   `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserToken         string   `protobuf:"bytes,2,opt,name=userToken,proto3" json:"userToken,omitempty"`
	LogServiceEnabled bool     `protobuf:"varint,3,opt,name=logServiceEnabled,proto3" json:"logServiceEnabled,omitempty"`
	LogData           []string `protobuf:"bytes,4,rep,name=logData,proto3" json:"logData,omitempty"`
}

func (x *LogService) Reset() {
	*x = LogService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogService) ProtoMessage() {}

func (x *LogService) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogService.ProtoReflect.Descriptor instead.
func (*LogService) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{8}
}

func (x *LogService) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *LogService) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *LogService) GetLogServiceEnabled() bool {
	if x != nil {
		return x.LogServiceEnabled
	}
	return false
}

func (x *LogService) GetLogData() []string {
	if x != nil {
		return x.LogData
	}
	return nil
}

type RfAPIList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RfAPIList []string `protobuf:"bytes,1,rep,name=rfAPIList,proto3" json:"rfAPIList,omitempty"`
}

func (x *RfAPIList) Reset() {
	*x = RfAPIList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfAPIList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfAPIList) ProtoMessage() {}

func (x *RfAPIList) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfAPIList.ProtoReflect.Descriptor instead.
func (*RfAPIList) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{9}
}

func (x *RfAPIList) GetRfAPIList() []string {
	if x != nil {
		return x.RfAPIList
	}
	return nil
}

type PollingRfAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserToken string `protobuf:"bytes,2,opt,name=userToken,proto3" json:"userToken,omitempty"`
	RfAPI     string `protobuf:"bytes,3,opt,name=rfAPI,proto3" json:"rfAPI,omitempty"`
}

func (x *PollingRfAPI) Reset() {
	*x = PollingRfAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollingRfAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollingRfAPI) ProtoMessage() {}

func (x *PollingRfAPI) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollingRfAPI.ProtoReflect.Descriptor instead.
func (*PollingRfAPI) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{10}
}

func (x *PollingRfAPI) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *PollingRfAPI) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *PollingRfAPI) GetRfAPI() string {
	if x != nil {
		return x.RfAPI
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress     string         `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	RedfishAPI    string         `protobuf:"bytes,2,opt,name=RedfishAPI,proto3" json:"RedfishAPI,omitempty"`
	DeviceAccount *DeviceAccount `protobuf:"bytes,3,opt,name=deviceAccount,proto3" json:"deviceAccount,omitempty"`
	HttpInfo      *HttpInfo      `protobuf:"bytes,4,opt,name=httpInfo,proto3" json:"httpInfo,omitempty"`
	UserToken     string         `protobuf:"bytes,5,opt,name=userToken,proto3" json:"userToken,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{11}
}

func (x *Device) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Device) GetRedfishAPI() string {
	if x != nil {
		return x.RedfishAPI
	}
	return ""
}

func (x *Device) GetDeviceAccount() *DeviceAccount {
	if x != nil {
		return x.DeviceAccount
	}
	return nil
}

func (x *Device) GetHttpInfo() *HttpInfo {
	if x != nil {
		return x.HttpInfo
	}
	return nil
}

func (x *Device) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type DeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceData []string `protobuf:"bytes,1,rep,name=deviceData,proto3" json:"deviceData,omitempty"`
}

func (x *DeviceData) Reset() {
	*x = DeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceData) ProtoMessage() {}

func (x *DeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceData.ProtoReflect.Descriptor instead.
func (*DeviceData) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceData) GetDeviceData() []string {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

type DeviceTemperatureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperatures map[string]string `protobuf:"bytes,1,rep,name=temperatures,proto3" json:"temperatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceTemperatureList) Reset() {
	*x = DeviceTemperatureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTemperatureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTemperatureList) ProtoMessage() {}

func (x *DeviceTemperatureList) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTemperatureList.ProtoReflect.Descriptor instead.
func (*DeviceTemperatureList) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceTemperatureList) GetTemperatures() map[string]string {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

type DeviceTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string   `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserToken string   `protobuf:"bytes,2,opt,name=userToken,proto3" json:"userToken,omitempty"`
	TempData  []string `protobuf:"bytes,3,rep,name=tempData,proto3" json:"tempData,omitempty"`
}

func (x *DeviceTemperature) Reset() {
	*x = DeviceTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTemperature) ProtoMessage() {}

func (x *DeviceTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTemperature.ProtoReflect.Descriptor instead.
func (*DeviceTemperature) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceTemperature) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceTemperature) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *DeviceTemperature) GetTempData() []string {
	if x != nil {
		return x.TempData
	}
	return nil
}

type RedfishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserToken string `protobuf:"bytes,2,opt,name=userToken,proto3" json:"userToken,omitempty"`
}

func (x *RedfishInfo) Reset() {
	*x = RedfishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedfishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedfishInfo) ProtoMessage() {}

func (x *RedfishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedfishInfo.ProtoReflect.Descriptor instead.
func (*RedfishInfo) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{15}
}

func (x *RedfishInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RedfishInfo) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{16}
}

type DeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device []*DeviceInfo `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceList) Reset() {
	*x = DeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceList) ProtoMessage() {}

func (x *DeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceList.ProtoReflect.Descriptor instead.
func (*DeviceList) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceList) GetDevice() []*DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeviceListByIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress []string `protobuf:"bytes,1,rep,name=IpAddress,proto3" json:"IpAddress,omitempty"`
}

func (x *DeviceListByIp) Reset() {
	*x = DeviceListByIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_importer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListByIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListByIp) ProtoMessage() {}

func (x *DeviceListByIp) ProtoReflect() protoreflect.Message {
	mi := &file_importer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListByIp.ProtoReflect.Descriptor instead.
func (*DeviceListByIp) Descriptor() ([]byte, []int) {
	return file_importer_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceListByIp) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

var File_importer_proto protoreflect.FileDescriptor

var file_importer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x3a, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x64, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x71, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2a, 0x0a, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x50,
	0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd,
	0x01, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50,
	0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x90,
	0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x29, 0x0a, 0x09, 0x52, 0x66, 0x41, 0x50, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x66, 0x41, 0x50, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x66, 0x41, 0x50, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66, 0x41, 0x50, 0x49, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x66, 0x41, 0x50,
	0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x66, 0x41, 0x50, 0x49, 0x22, 0xd3,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x66, 0x69,
	0x73, 0x68, 0x41, 0x50, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x64,
	0x66, 0x69, 0x73, 0x68, 0x41, 0x50, 0x49, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x74,
	0x74, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x49, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x66, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x2e, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x95, 0x0c, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66, 0x41, 0x50, 0x49, 0x12, 0x16, 0x2e, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66,
	0x41, 0x50, 0x49, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66,
	0x41, 0x50, 0x49, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66, 0x41, 0x50, 0x49, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x66, 0x41, 0x50,
	0x49, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x66, 0x41, 0x50, 0x49, 0x1a, 0x13, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x66, 0x41, 0x50, 0x49, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_importer_proto_rawDescOnce sync.Once
	file_importer_proto_rawDescData = file_importer_proto_rawDesc
)

func file_importer_proto_rawDescGZIP() []byte {
	file_importer_proto_rawDescOnce.Do(func() {
		file_importer_proto_rawDescData = protoimpl.X.CompressGZIP(file_importer_proto_rawDescData)
	})
	return file_importer_proto_rawDescData
}

var file_importer_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_importer_proto_goTypes = []interface{}{
	(*DeviceAccount)(nil),         // 0: importer.DeviceAccount
	(*DeviceAccountList)(nil),     // 1: importer.DeviceAccountList
	(*DeviceInfo)(nil),            // 2: importer.DeviceInfo
	(*FreqInfo)(nil),              // 3: importer.FreqInfo
	(*HttpData)(nil),              // 4: importer.HttpData
	(*HttpPostData)(nil),          // 5: importer.HttpPostData
	(*HttpPatchData)(nil),         // 6: importer.HttpPatchData
	(*HttpInfo)(nil),              // 7: importer.HttpInfo
	(*LogService)(nil),            // 8: importer.LogService
	(*RfAPIList)(nil),             // 9: importer.RfAPIList
	(*PollingRfAPI)(nil),          // 10: importer.PollingRfAPI
	(*Device)(nil),                // 11: importer.Device
	(*DeviceData)(nil),            // 12: importer.DeviceData
	(*DeviceTemperatureList)(nil), // 13: importer.DeviceTemperatureList
	(*DeviceTemperature)(nil),     // 14: importer.DeviceTemperature
	(*RedfishInfo)(nil),           // 15: importer.RedfishInfo
	(*Empty)(nil),                 // 16: importer.Empty
	(*DeviceList)(nil),            // 17: importer.DeviceList
	(*DeviceListByIp)(nil),        // 18: importer.DeviceListByIp
	nil,                           // 19: importer.DeviceAccountList.AccountEntry
	nil,                           // 20: importer.HttpPostData.PostDataEntry
	nil,                           // 21: importer.HttpPatchData.PatchDataEntry
	nil,                           // 22: importer.DeviceTemperatureList.TemperaturesEntry
	(*empty.Empty)(nil),           // 23: google.protobuf.Empty
}
var file_importer_proto_depIdxs = []int32{
	19, // 0: importer.DeviceAccountList.account:type_name -> importer.DeviceAccountList.AccountEntry
	20, // 1: importer.HttpPostData.postData:type_name -> importer.HttpPostData.PostDataEntry
	21, // 2: importer.HttpPatchData.patchData:type_name -> importer.HttpPatchData.PatchDataEntry
	5,  // 3: importer.HttpInfo.httpPostData:type_name -> importer.HttpPostData
	6,  // 4: importer.HttpInfo.httpPatchData:type_name -> importer.HttpPatchData
	0,  // 5: importer.Device.deviceAccount:type_name -> importer.DeviceAccount
	7,  // 6: importer.Device.httpInfo:type_name -> importer.HttpInfo
	22, // 7: importer.DeviceTemperatureList.temperatures:type_name -> importer.DeviceTemperatureList.TemperaturesEntry
	2,  // 8: importer.DeviceList.device:type_name -> importer.DeviceInfo
	17, // 9: importer.device_management.SendDeviceList:input_type -> importer.DeviceList
	11, // 10: importer.device_management.DeleteDeviceList:input_type -> importer.Device
	3,  // 11: importer.device_management.SetFrequency:input_type -> importer.FreqInfo
	16, // 12: importer.device_management.GetCurrentDevices:input_type -> importer.Empty
	0,  // 13: importer.device_management.CreateDeviceAccount:input_type -> importer.DeviceAccount
	0,  // 14: importer.device_management.RemoveDeviceAccount:input_type -> importer.DeviceAccount
	0,  // 15: importer.device_management.ChangeDeviceUserPassword:input_type -> importer.DeviceAccount
	0,  // 16: importer.device_management.LoginDevice:input_type -> importer.DeviceAccount
	0,  // 17: importer.device_management.LogoutDevice:input_type -> importer.DeviceAccount
	0,  // 18: importer.device_management.StartQueryDeviceData:input_type -> importer.DeviceAccount
	0,  // 19: importer.device_management.StopQueryDeviceData:input_type -> importer.DeviceAccount
	0,  // 20: importer.device_management.ListDeviceAccounts:input_type -> importer.DeviceAccount
	0,  // 21: importer.device_management.SetSessionService:input_type -> importer.DeviceAccount
	8,  // 22: importer.device_management.EnableLogServiceState:input_type -> importer.LogService
	8,  // 23: importer.device_management.ResetDeviceLogData:input_type -> importer.LogService
	8,  // 24: importer.device_management.GetDeviceLogData:input_type -> importer.LogService
	11, // 25: importer.device_management.GetDeviceData:input_type -> importer.Device
	11, // 26: importer.device_management.GenericDeviceAccess:input_type -> importer.Device
	10, // 27: importer.device_management.AddPollingRfAPI:input_type -> importer.PollingRfAPI
	10, // 28: importer.device_management.RemovePollingRfAPI:input_type -> importer.PollingRfAPI
	10, // 29: importer.device_management.GetRfAPIList:input_type -> importer.PollingRfAPI
	14, // 30: importer.device_management.GetDeviceTemperatures:input_type -> importer.DeviceTemperature
	23, // 31: importer.device_management.SendDeviceList:output_type -> google.protobuf.Empty
	23, // 32: importer.device_management.DeleteDeviceList:output_type -> google.protobuf.Empty
	23, // 33: importer.device_management.SetFrequency:output_type -> google.protobuf.Empty
	18, // 34: importer.device_management.GetCurrentDevices:output_type -> importer.DeviceListByIp
	23, // 35: importer.device_management.CreateDeviceAccount:output_type -> google.protobuf.Empty
	23, // 36: importer.device_management.RemoveDeviceAccount:output_type -> google.protobuf.Empty
	23, // 37: importer.device_management.ChangeDeviceUserPassword:output_type -> google.protobuf.Empty
	0,  // 38: importer.device_management.LoginDevice:output_type -> importer.DeviceAccount
	23, // 39: importer.device_management.LogoutDevice:output_type -> google.protobuf.Empty
	23, // 40: importer.device_management.StartQueryDeviceData:output_type -> google.protobuf.Empty
	23, // 41: importer.device_management.StopQueryDeviceData:output_type -> google.protobuf.Empty
	1,  // 42: importer.device_management.ListDeviceAccounts:output_type -> importer.DeviceAccountList
	23, // 43: importer.device_management.SetSessionService:output_type -> google.protobuf.Empty
	23, // 44: importer.device_management.EnableLogServiceState:output_type -> google.protobuf.Empty
	23, // 45: importer.device_management.ResetDeviceLogData:output_type -> google.protobuf.Empty
	8,  // 46: importer.device_management.GetDeviceLogData:output_type -> importer.LogService
	12, // 47: importer.device_management.GetDeviceData:output_type -> importer.DeviceData
	4,  // 48: importer.device_management.GenericDeviceAccess:output_type -> importer.HttpData
	23, // 49: importer.device_management.AddPollingRfAPI:output_type -> google.protobuf.Empty
	23, // 50: importer.device_management.RemovePollingRfAPI:output_type -> google.protobuf.Empty
	9,  // 51: importer.device_management.GetRfAPIList:output_type -> importer.RfAPIList
	14, // 52: importer.device_management.GetDeviceTemperatures:output_type -> importer.DeviceTemperature
	31, // [31:53] is the sub-list for method output_type
	9,  // [9:31] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_importer_proto_init() }
func file_importer_proto_init() {
	if File_importer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_importer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAccountList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpPostData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpPatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfAPIList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollingRfAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTemperatureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedfishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_importer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListByIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_importer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_importer_proto_goTypes,
		DependencyIndexes: file_importer_proto_depIdxs,
		MessageInfos:      file_importer_proto_msgTypes,
	}.Build()
	File_importer_proto = out.File
	file_importer_proto_rawDesc = nil
	file_importer_proto_goTypes = nil
	file_importer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceManagementClient is the client API for DeviceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceManagementClient interface {
	SendDeviceList(ctx context.Context, in *DeviceList, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDeviceList(ctx context.Context, in *Device, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFrequency(ctx context.Context, in *FreqInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCurrentDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListByIp, error)
	CreateDeviceAccount(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveDeviceAccount(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeDeviceUserPassword(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	LoginDevice(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*DeviceAccount, error)
	LogoutDevice(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	StartQueryDeviceData(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	StopQueryDeviceData(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDeviceAccounts(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*DeviceAccountList, error)
	SetSessionService(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableLogServiceState(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*empty.Empty, error)
	ResetDeviceLogData(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDeviceLogData(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*LogService, error)
	GetDeviceData(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceData, error)
	GenericDeviceAccess(ctx context.Context, in *Device, opts ...grpc.CallOption) (*HttpData, error)
	AddPollingRfAPI(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*empty.Empty, error)
	RemovePollingRfAPI(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRfAPIList(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*RfAPIList, error)
	GetDeviceTemperatures(ctx context.Context, in *DeviceTemperature, opts ...grpc.CallOption) (*DeviceTemperature, error)
}

type deviceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagementClient(cc grpc.ClientConnInterface) DeviceManagementClient {
	return &deviceManagementClient{cc}
}

func (c *deviceManagementClient) SendDeviceList(ctx context.Context, in *DeviceList, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/SendDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) DeleteDeviceList(ctx context.Context, in *Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/DeleteDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) SetFrequency(ctx context.Context, in *FreqInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/SetFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GetCurrentDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListByIp, error) {
	out := new(DeviceListByIp)
	err := c.cc.Invoke(ctx, "/importer.device_management/GetCurrentDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) CreateDeviceAccount(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/CreateDeviceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) RemoveDeviceAccount(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/RemoveDeviceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) ChangeDeviceUserPassword(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/ChangeDeviceUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) LoginDevice(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*DeviceAccount, error) {
	out := new(DeviceAccount)
	err := c.cc.Invoke(ctx, "/importer.device_management/LoginDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) LogoutDevice(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/LogoutDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) StartQueryDeviceData(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/StartQueryDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) StopQueryDeviceData(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/StopQueryDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) ListDeviceAccounts(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*DeviceAccountList, error) {
	out := new(DeviceAccountList)
	err := c.cc.Invoke(ctx, "/importer.device_management/ListDeviceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) SetSessionService(ctx context.Context, in *DeviceAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/SetSessionService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) EnableLogServiceState(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/EnableLogServiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) ResetDeviceLogData(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/ResetDeviceLogData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GetDeviceLogData(ctx context.Context, in *LogService, opts ...grpc.CallOption) (*LogService, error) {
	out := new(LogService)
	err := c.cc.Invoke(ctx, "/importer.device_management/GetDeviceLogData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GetDeviceData(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceData, error) {
	out := new(DeviceData)
	err := c.cc.Invoke(ctx, "/importer.device_management/GetDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GenericDeviceAccess(ctx context.Context, in *Device, opts ...grpc.CallOption) (*HttpData, error) {
	out := new(HttpData)
	err := c.cc.Invoke(ctx, "/importer.device_management/GenericDeviceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) AddPollingRfAPI(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/AddPollingRfAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) RemovePollingRfAPI(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/importer.device_management/RemovePollingRfAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GetRfAPIList(ctx context.Context, in *PollingRfAPI, opts ...grpc.CallOption) (*RfAPIList, error) {
	out := new(RfAPIList)
	err := c.cc.Invoke(ctx, "/importer.device_management/GetRfAPIList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) GetDeviceTemperatures(ctx context.Context, in *DeviceTemperature, opts ...grpc.CallOption) (*DeviceTemperature, error) {
	out := new(DeviceTemperature)
	err := c.cc.Invoke(ctx, "/importer.device_management/GetDeviceTemperatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagementServer is the server API for DeviceManagement service.
type DeviceManagementServer interface {
	SendDeviceList(context.Context, *DeviceList) (*empty.Empty, error)
	DeleteDeviceList(context.Context, *Device) (*empty.Empty, error)
	SetFrequency(context.Context, *FreqInfo) (*empty.Empty, error)
	GetCurrentDevices(context.Context, *Empty) (*DeviceListByIp, error)
	CreateDeviceAccount(context.Context, *DeviceAccount) (*empty.Empty, error)
	RemoveDeviceAccount(context.Context, *DeviceAccount) (*empty.Empty, error)
	ChangeDeviceUserPassword(context.Context, *DeviceAccount) (*empty.Empty, error)
	LoginDevice(context.Context, *DeviceAccount) (*DeviceAccount, error)
	LogoutDevice(context.Context, *DeviceAccount) (*empty.Empty, error)
	StartQueryDeviceData(context.Context, *DeviceAccount) (*empty.Empty, error)
	StopQueryDeviceData(context.Context, *DeviceAccount) (*empty.Empty, error)
	ListDeviceAccounts(context.Context, *DeviceAccount) (*DeviceAccountList, error)
	SetSessionService(context.Context, *DeviceAccount) (*empty.Empty, error)
	EnableLogServiceState(context.Context, *LogService) (*empty.Empty, error)
	ResetDeviceLogData(context.Context, *LogService) (*empty.Empty, error)
	GetDeviceLogData(context.Context, *LogService) (*LogService, error)
	GetDeviceData(context.Context, *Device) (*DeviceData, error)
	GenericDeviceAccess(context.Context, *Device) (*HttpData, error)
	AddPollingRfAPI(context.Context, *PollingRfAPI) (*empty.Empty, error)
	RemovePollingRfAPI(context.Context, *PollingRfAPI) (*empty.Empty, error)
	GetRfAPIList(context.Context, *PollingRfAPI) (*RfAPIList, error)
	GetDeviceTemperatures(context.Context, *DeviceTemperature) (*DeviceTemperature, error)
}

// UnimplementedDeviceManagementServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceManagementServer struct {
}

func (*UnimplementedDeviceManagementServer) SendDeviceList(context.Context, *DeviceList) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceList not implemented")
}
func (*UnimplementedDeviceManagementServer) DeleteDeviceList(context.Context, *Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceList not implemented")
}
func (*UnimplementedDeviceManagementServer) SetFrequency(context.Context, *FreqInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFrequency not implemented")
}
func (*UnimplementedDeviceManagementServer) GetCurrentDevices(context.Context, *Empty) (*DeviceListByIp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentDevices not implemented")
}
func (*UnimplementedDeviceManagementServer) CreateDeviceAccount(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceAccount not implemented")
}
func (*UnimplementedDeviceManagementServer) RemoveDeviceAccount(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceAccount not implemented")
}
func (*UnimplementedDeviceManagementServer) ChangeDeviceUserPassword(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDeviceUserPassword not implemented")
}
func (*UnimplementedDeviceManagementServer) LoginDevice(context.Context, *DeviceAccount) (*DeviceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDevice not implemented")
}
func (*UnimplementedDeviceManagementServer) LogoutDevice(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutDevice not implemented")
}
func (*UnimplementedDeviceManagementServer) StartQueryDeviceData(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQueryDeviceData not implemented")
}
func (*UnimplementedDeviceManagementServer) StopQueryDeviceData(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopQueryDeviceData not implemented")
}
func (*UnimplementedDeviceManagementServer) ListDeviceAccounts(context.Context, *DeviceAccount) (*DeviceAccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceAccounts not implemented")
}
func (*UnimplementedDeviceManagementServer) SetSessionService(context.Context, *DeviceAccount) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionService not implemented")
}
func (*UnimplementedDeviceManagementServer) EnableLogServiceState(context.Context, *LogService) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLogServiceState not implemented")
}
func (*UnimplementedDeviceManagementServer) ResetDeviceLogData(context.Context, *LogService) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDeviceLogData not implemented")
}
func (*UnimplementedDeviceManagementServer) GetDeviceLogData(context.Context, *LogService) (*LogService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceLogData not implemented")
}
func (*UnimplementedDeviceManagementServer) GetDeviceData(context.Context, *Device) (*DeviceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceData not implemented")
}
func (*UnimplementedDeviceManagementServer) GenericDeviceAccess(context.Context, *Device) (*HttpData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenericDeviceAccess not implemented")
}
func (*UnimplementedDeviceManagementServer) AddPollingRfAPI(context.Context, *PollingRfAPI) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPollingRfAPI not implemented")
}
func (*UnimplementedDeviceManagementServer) RemovePollingRfAPI(context.Context, *PollingRfAPI) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePollingRfAPI not implemented")
}
func (*UnimplementedDeviceManagementServer) GetRfAPIList(context.Context, *PollingRfAPI) (*RfAPIList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRfAPIList not implemented")
}
func (*UnimplementedDeviceManagementServer) GetDeviceTemperatures(context.Context, *DeviceTemperature) (*DeviceTemperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTemperatures not implemented")
}

func RegisterDeviceManagementServer(s *grpc.Server, srv DeviceManagementServer) {
	s.RegisterService(&_DeviceManagement_serviceDesc, srv)
}

func _DeviceManagement_SendDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).SendDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/SendDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).SendDeviceList(ctx, req.(*DeviceList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_DeleteDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).DeleteDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/DeleteDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).DeleteDeviceList(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_SetFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreqInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).SetFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/SetFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).SetFrequency(ctx, req.(*FreqInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GetCurrentDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GetCurrentDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GetCurrentDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GetCurrentDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_CreateDeviceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).CreateDeviceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/CreateDeviceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).CreateDeviceAccount(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_RemoveDeviceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).RemoveDeviceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/RemoveDeviceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).RemoveDeviceAccount(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_ChangeDeviceUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).ChangeDeviceUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/ChangeDeviceUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).ChangeDeviceUserPassword(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_LoginDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).LoginDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/LoginDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).LoginDevice(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_LogoutDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).LogoutDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/LogoutDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).LogoutDevice(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_StartQueryDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).StartQueryDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/StartQueryDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).StartQueryDeviceData(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_StopQueryDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).StopQueryDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/StopQueryDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).StopQueryDeviceData(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_ListDeviceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).ListDeviceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/ListDeviceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).ListDeviceAccounts(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_SetSessionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).SetSessionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/SetSessionService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).SetSessionService(ctx, req.(*DeviceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_EnableLogServiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).EnableLogServiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/EnableLogServiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).EnableLogServiceState(ctx, req.(*LogService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_ResetDeviceLogData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).ResetDeviceLogData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/ResetDeviceLogData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).ResetDeviceLogData(ctx, req.(*LogService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GetDeviceLogData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GetDeviceLogData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GetDeviceLogData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GetDeviceLogData(ctx, req.(*LogService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GetDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GetDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GetDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GetDeviceData(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GenericDeviceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GenericDeviceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GenericDeviceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GenericDeviceAccess(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_AddPollingRfAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingRfAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).AddPollingRfAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/AddPollingRfAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).AddPollingRfAPI(ctx, req.(*PollingRfAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_RemovePollingRfAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingRfAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).RemovePollingRfAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/RemovePollingRfAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).RemovePollingRfAPI(ctx, req.(*PollingRfAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GetRfAPIList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingRfAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GetRfAPIList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GetRfAPIList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GetRfAPIList(ctx, req.(*PollingRfAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_GetDeviceTemperatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTemperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).GetDeviceTemperatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/importer.device_management/GetDeviceTemperatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).GetDeviceTemperatures(ctx, req.(*DeviceTemperature))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "importer.device_management",
	HandlerType: (*DeviceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDeviceList",
			Handler:    _DeviceManagement_SendDeviceList_Handler,
		},
		{
			MethodName: "DeleteDeviceList",
			Handler:    _DeviceManagement_DeleteDeviceList_Handler,
		},
		{
			MethodName: "SetFrequency",
			Handler:    _DeviceManagement_SetFrequency_Handler,
		},
		{
			MethodName: "GetCurrentDevices",
			Handler:    _DeviceManagement_GetCurrentDevices_Handler,
		},
		{
			MethodName: "CreateDeviceAccount",
			Handler:    _DeviceManagement_CreateDeviceAccount_Handler,
		},
		{
			MethodName: "RemoveDeviceAccount",
			Handler:    _DeviceManagement_RemoveDeviceAccount_Handler,
		},
		{
			MethodName: "ChangeDeviceUserPassword",
			Handler:    _DeviceManagement_ChangeDeviceUserPassword_Handler,
		},
		{
			MethodName: "LoginDevice",
			Handler:    _DeviceManagement_LoginDevice_Handler,
		},
		{
			MethodName: "LogoutDevice",
			Handler:    _DeviceManagement_LogoutDevice_Handler,
		},
		{
			MethodName: "StartQueryDeviceData",
			Handler:    _DeviceManagement_StartQueryDeviceData_Handler,
		},
		{
			MethodName: "StopQueryDeviceData",
			Handler:    _DeviceManagement_StopQueryDeviceData_Handler,
		},
		{
			MethodName: "ListDeviceAccounts",
			Handler:    _DeviceManagement_ListDeviceAccounts_Handler,
		},
		{
			MethodName: "SetSessionService",
			Handler:    _DeviceManagement_SetSessionService_Handler,
		},
		{
			MethodName: "EnableLogServiceState",
			Handler:    _DeviceManagement_EnableLogServiceState_Handler,
		},
		{
			MethodName: "ResetDeviceLogData",
			Handler:    _DeviceManagement_ResetDeviceLogData_Handler,
		},
		{
			MethodName: "GetDeviceLogData",
			Handler:    _DeviceManagement_GetDeviceLogData_Handler,
		},
		{
			MethodName: "GetDeviceData",
			Handler:    _DeviceManagement_GetDeviceData_Handler,
		},
		{
			MethodName: "GenericDeviceAccess",
			Handler:    _DeviceManagement_GenericDeviceAccess_Handler,
		},
		{
			MethodName: "AddPollingRfAPI",
			Handler:    _DeviceManagement_AddPollingRfAPI_Handler,
		},
		{
			MethodName: "RemovePollingRfAPI",
			Handler:    _DeviceManagement_RemovePollingRfAPI_Handler,
		},
		{
			MethodName: "GetRfAPIList",
			Handler:    _DeviceManagement_GetRfAPIList_Handler,
		},
		{
			MethodName: "GetDeviceTemperatures",
			Handler:    _DeviceManagement_GetDeviceTemperatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "importer.proto",
}
